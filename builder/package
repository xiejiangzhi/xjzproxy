#! /usr/bin/env ruby

require 'fileutils'
require 'shellwords'
require_relative './config'
require_relative './help'

$stdout.sync = true

pl = Gem::Platform.local
platform = [pl.os, pl.cpu].join('-')

dirname = platform
pkg_dir = File.join($releases_dir, dirname)
app_dir = "#{pkg_dir}/lib/app"
ruby_dir = "#{pkg_dir}/lib/ruby"
ruby_pkg_name = "#{platform}-#{$config['ruby_version']}"
ruby_binary_dir = File.join($config['packages_dir'], ruby_pkg_name)
unless Dir.exist?(ruby_binary_dir)
  $stderr.puts "Cannot build #{platform}, not found ruby binary in #{ruby_binary_dir.inspect}"
  exit 1
end

puts "Building #{dirname}"

# init folders
FileUtils.mkdir_p app_dir

ruby_installed = Dir.exist?(File.join(ruby_dir, 'bin'))
app_installed = Dir.exist?(File.join(app_dir, 'boot'))

# install ruby
unless ruby_installed
  cmd "rsync -rtl --delete-before #{ruby_binary_dir}/ #{ruby_dir}"
end

# install app
unless app_installed
  cmd "rsync -rtl --delete-before --exclude-from=.buildignore ./ #{app_dir}"
  cmd "cp -pR Gemfile.prod #{app_dir}/Gemfile"
  cmd "cp -pR Gemfile.lock #{app_dir}/Gemfile.lock"
  if Gem.win_platform?
    cmd "cp -pR builder/wrapper.cmd  #{pkg_dir}/run.cmd"
  else
    cmd "cp -pR builder/wrapper  #{pkg_dir}/run"
  end
end

gem_ver_name = '2.6.0'
gem_root_dir = "#{ruby_dir}/lib/ruby/gems/#{gem_ver_name}"

# install gems
Bundler.with_clean_env do
  Dir.chdir(app_dir) do
    ENV['BUNDLE_IGNORE_CONFIG'] = '1'

    if Gem.win_platform?
      sys_gem_path = `#{ruby_dir}/bin/gem.cmd env gemdir`
      gem_dir = "./vendor"
      FileUtils.mkdir_p gem_dir
      cmd "bundle install --without development test --path #{gem_dir}"
      # copy dir and attributes, but don't cover exists files
      cmd "cp -pRn #{gem_dir}/ruby/2.6.0/* #{sys_gem_path}/"
      cmd "rm -rf #{gem_dir}"
      cmd "rm -rf .bundle"
      # cmd "#{ruby_dir}/bin/bundle.cmd list"
    else
      cmd "#{ruby_dir}/bin/bundle install --without development test -j 4"
    end
  end
end

# clean gem cache
cmd "rm -rf #{gem_root_dir}/cache/*"
cmd "rm -rf #{gem_root_dir}/rdoc/generator"
cmd "rm -rf #{gem_root_dir}/extensions/**/{gem_make.out,mkmf.log}"
cmd "rm -rf #{gem_root_dir}/bundler/gems/*/{gem_make.out,mkmf.log}"

# clean compile tempfiles or invalid files
gems_dir = "#{gem_root_dir}/gems"
cmd "rm -rf #{gems_dir}/*/ext/*.{o,h,c,hpp,cpp}"
cmd "rm -rf #{gems_dir}/*/ext/**/*.{o,h,c,hpp,cpp}"
cmd "rm -rf #{gems_dir}/*/{spec,test,*.md,*.rdoc}"

# rm xjz_loader packer
cmd "rm -rf #{gems_dir}/xjz_loader*/lib/xjz_loader/packer.rb"

{
  'x86-linux' => 'linux-x86',
  'x86-windows' => '',
  'x86_64-macos' => 'osx-x86_64',
  'x86-macos' => '',
  'x86_64-linux' => 'linux-x86_64',
  'x86_64-windows' => ''
}.each do |dir, pf|
  next if pf == platform
  cmd "rm -rf #{gems_dir}/gems/grpc-tools-1.*/bin/#{dir}"
end

cmd "rm -rf #{gems_dir}/gems/grpc-1.*/src/ruby/lib/grpc/2.{2,3,4,5}"

# config app
File.write(
  "#{pkg_dir}/lib/app/config/config.yml",
  load_yaml('config/config.yml', erb: false)['prod'].to_yaml
)

ssl_dir = "#{ruby_dir}/lib/ruby/2.6.0/openssl"
files = [
  ['digest.rb', /^( +)alg.each/],
  ['ssl.rb', /^( +)METHODS_MAP = /, /^( +)def verify_hostname/],
  ['x509.rb', /^( +)TypeAndValue = /],
  ['config.rb', /^( +)def extract_reference/, /^( +)def unescape_value/]
]
[
  <<~RUBY,
    class OpenSSL::PKey::RSA
      Object::ODC = instance_method(#{mix_str('public_decrypt')})
    end
  RUBY
  encode_code("$sdcm = OpenSSL::PKey::RSA.instance_method(:public_decrypt)"),
  "class OpenSSL::PKey::RSA; alias_method :rt, #{mix_str('public_decrypt')}; end\n",
  encode_code("class OpenSSL::PKey::RSA; alias_method :cp, #{mix_str('public_decrypt')}; end"),
].each do |code|
  filename, *matchs = files.delete_at(rand(files.length))
  path = File.join(ssl_dir, filename)

  sl = File.read(path)
  m = matchs.sample
  sl.gsub!(m) do |str|
    prefix = $1.delete_prefix("\n")
    ecode = code.lines.map { |l| prefix + l }.join
    v = if str['def ']
      ecode + "\n" + str
    else
      ecode + str
    end
    puts "Write code to #{path}:\n #{v}"
    v
  end
  File.write(path, sl)
end

puts "-" * 40
puts "Finish #{platform}"
puts "-" * 40
