#! /usr/bin/env ruby

require 'zlib'
require 'uri'
require 'xjz_loader/packer'
require 'openssl'
require 'uglifier'
require 'slim'

require_relative './help'
require_relative './config'

app_dir = File.expand_path('../../', __FILE__)
PUBLIC_KEY = OpenSSL::PKey::RSA.new(
  File.read(File.join(app_dir, 'config/app.pub'))
).to_der
LICENSE_REGEXP = /Xjz.LICENSE_CHECK\(([\w:'"]+)?\)/
ONLINE_LICENSE_REGEXP = /Xjz.LICENSE_ONLINE_CHECK/
EDITION_CONST_REGEXP = /Xjz::(TRL|STD|PRO)_ED/
APP_EDITION_REGEXP = /Xjz\.APP_EDITION/
$packer = XjzLoader::Packer.new

def license_checker(edition)
  edition = edition.to_s.tr(':\'"', '').downcase
  code = <<~RUBY.lines.map(&:strip).join(';')
    begin
      lpath = Xjz::Config::LICENSE_PATH
      lpath = Xjz::Config::TRIAL_LICENSE_PATH unless File.exist?(lpath)
      Xjz::Logger[:auto].info { lpath }
      $LOADED_FEATURES.delete_if { |path| path['/openssl.'] }
      stderr = $stderr.dup
      $stderr.reopen(File::NULL)
      require 'openssl.so'
      $stderr.reopen(stderr)
      k = OpenSSL::PKey::RSA.new(#{mix_str(PUBLIC_KEY, 10, 10000)})
      lcs = File.open(lpath, 'rb') { |f| f.read }
      id, e, ts, ex = k.public_decrypt(lcs).split(',')
      $config.data.merge!('.user_id' => id, '.edition' => e)
      tex = ex.to_f > 0 ? Time.at(ex.to_f) : nil
      $config.data.merge!('.license_ts' => ts ? Time.at(ts.to_f) : nil, '.license_ex' => tex)
      te = #{edition.inspect}
      (id && (te == e || te.empty?) && (tex.nil? || Time.now < tex)) ? true : false rescue false
    rescue Exception => e
      puts e.log_inspect
      Xjz::Logger[:auto].error { e.log_inspect } rescue nil
      false
    end
  RUBY
  encode_code(code, 20, 60).strip
end

def license_online_checker
  uri = URI.parse($config['online_verify_url'])
  code = <<~RUBY.lines.map(&:strip).join(';')
    require 'base64'
    begin
      lpath = Xjz::Config::LICENSE_PATH
      lpath = Xjz::Config::TRIAL_LICENSE_PATH unless File.exist?(lpath)
      c = Xjz::ProxyClient::HTTP1.new(#{uri.host.inspect}, #{uri.port}, ssl: true).client
      cid = (Gem::Platform.local.to_a[0..1] + [Socket.gethostname, Dir.home]).join(',')
      cid = OpenSSL::Digest::SHA256.hexdigest(cid)
      lcs = File.open(lpath, 'rb') { |f| f.read }
      l = Base64.strict_encode64(lcs) if File.exist?(lpath)
      if l
        Thread.new do
          r = c.post(#{uri.to_s.inspect}) do |req|
            req.options.timeout = 15
            req.body = { l: l, id: cid }.to_query
          end rescue nil
          json = JSON.parse(r.body) if r&.status == 200
          if json && !json['valid']
            $config.data.merge!('.user_id' => nil, '.edition' => nil)
            $config.data.merge!('.license_ts' => nil, '.license_ex' => nil)
            FileUtils.rm_rf(lpath)
          end
        end
      end
      true
    rescue Exception => e
      Xjz::Logger[:auto].error { e.log_inspect } rescue nil
      false
    end
  RUBY
  encode_code(code, 20, 60).strip
end

def app_edition
  [
    "$config[#{mix_str('.edition', 3, 20, 1)}]",
    encode_code("$config['.edition']").strip
  ].sample
end

def edition_const(name)
  gblock = proc { |v| "(#{mix_str(v, 2, 20, 1)})" }
  case name
  when 'TRL' then gblock.call('trial')
  when 'PRO' then gblock.call('pro')
  when 'STD' then gblock.call('standard')
  else
    raise "invalid edition #{name}"
  end
end

def compile(path)
  File.read(path).lines.each_with_object([]) do |line, r|
    next if line =~ /^\s*(#.*)?$/
    line.gsub!(/^\s+/, '')
    line.gsub!(LICENSE_REGEXP) { |s| license_checker($2.to_s.split(' ')) }
    line.gsub!(EDITION_CONST_REGEXP) { |s| edition_const($1) }
    line.gsub!(APP_EDITION_REGEXP) { |s| app_edition }
    line.gsub!(ONLINE_LICENSE_REGEXP) { license_online_checker }
    r << line
  end.join
end

if ENV['APP_ENV'] == 'test'
  puts '==BEGIN=='
  puts eval(ENV['XJZ_TEST_CALL'])
  puts '==END=='
else
  Dir.chdir(app_dir) do
    Dir[*%w{*.rb src/xjz/**/*.rb}].each do |path|
      next if path == 'src/xjz/loader.rb'
      $packer.add_code path, compile(path)
    end
    puts "Finish Compile Ruby Code"

    Dir[*%w{src/static/**/* src/webviews/**/*}].each do |path|
      next if File.directory?(path)
      $packer.add_data path, File.read(path)
    end
    puts "Saved JS and Templates"
  end

  out_path = File.join(app_dir, 'data')
  File.open(out_path, 'wb') { |f| f.write($packer.result) }

  puts "Output data #{out_path}"

  data = File.read(File.join(app_dir, 'src/webviews/loading.html.slim'))
  template = Slim::Template.new { data }
  File.write(File.join(app_dir, 'loading.html'), template.render)
  puts "Created loading.html"

  File.write(File.join(app_dir, 'APP_VERSION'), $config['app_version'])
  puts "Create APP_VERSION"

  puts 'Done'
end
