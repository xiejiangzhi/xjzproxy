#! /usr/bin/env ruby
#
require 'optparse'
require_relative './xjz_license'

options = {}
parser = OptionParser.new do |opts|
  opts.banner = "Usage: manager [options]"

  opts.on(
    '-gLICENSE_PATH', '--generate LICENSE_PATH',
    'Generate a license and write to the file'
  ) do |path|
    options[:g] = path
  end

  opts.on('-iID', '--id STRING', 'license owner user id') do |id|
    options[:id] = id
  end

  opts.on('-eEDITION', '--edition EDITION', 'editions: standard and pro') do |e|
    options[:e] = e
  end

  opts.on('-fFLAG', '--flag FLAG', 'license flags, split by "," or use multiple times') do |f|
    options[:flags] ||= []

    if Array === f
      options[:flags].push(*f)
    else
      options[:flags] << f.to_s
    end
  end

  opts.on('-cLICENSE_PATH', '--check LICENSE_PATH', 'Check license') do |path|
    options[:c] = path
  end

  opts.on('-tSECONDS', '--time SECONDS', 'Expire in the seconds') do |s|
    options[:t] = s.to_i
  end
end
parser.parse!

if options.empty?
  puts parser.help
  exit 1
end

manager = XJZLicense.new(File.expand_path('../license_key', __FILE__))

if path = options[:g]
  if File.exist?(path)
    $stderr.puts "File #{path} existed"
    exit 1
  elsif options[:id] && options[:e]
    l = manager.generate_license(
      options[:id], options[:e], flags: options[:flags] || [], expire_in: options[:t]
    )
    path += '.lcs' unless path.end_with?('.lcs')
    File.write(path, l)
  else
    puts options.inspect
    $stderr.puts "id and edition is required"
    exit 1
  end
elsif path = options[:c]
  if File.exist?(path)
    id, e, ts, ex, *flags = manager.decrypt(File.read(path))
    if id
      puts <<~STR
        id: #{id}
        edition: #{e}
        flags: #{flags.join(', ')}
        ctime: #{Time.at(ts.to_s.to_f).strftime('%F %T')}
        expire_at: #{ex.to_s.to_f > 0 ? Time.at(ex.to_s.to_f).strftime('%F %T') : nil}
      STR
    else
      $stderr.puts "Invalid license"
      exit 1
    end
  else
    $stderr.puts "Not found file #{path}"
    exit 1
  end
end
