ruby:
  @rt = rt = request_tracker
  @req = req = rt.request
  @res = res = rt.response
  ap = rt.api_project
  api_type, api_desc = rt.api_desc

  @current_tab = session[:history_detail_tab] || 'headers'
  def nav_link(id)
    cls = 'nav-link'
    cls << ' active' if id.to_s == @current_tab
    {
      tag: :a, class: cls, name: id, href: "#rt_#{id}",
      data: { toggle: 'tab' }, 'xjz-id' => 'history.detail_tab',
    }
  end

  def tab_pane(id, &block)
    css_cls = 'tab-pane fade'
    css_cls << ' active show' if id.to_s == @current_tab
    { tag: 'div', class: css_cls, id: "rt_#{id}" }
  end

  def create_curl
    str = 'curl'
    str << " -X #{@req.http_method.upcase}"
    str << " --http2" if @req.h2?
    str << " '#{@req.url}'"
    @req.proxy_headers.each do |k, v|
      str << " -H '#{k}: #{v}'"
    end
    str << " --data '#{@req.body}'" unless @req.body.to_s.empty?
    str << " --compressed"
    str
  end

ul.nav.nav-tabs.sticky-top.pt-1.bg-white[
  style="top: 56px;"
]
  li.nav-item
    *nav_link(:headers) Headers

  - unless res&.body.to_s.empty?
    li.nav-item
      *nav_link(:res) Response

  - if api_desc.present?
    li.nav-item
      *nav_link(:api) API

.detail.tab-content.pt-3.pb-5 style='overflow-x: hidden;'
  *tab_pane(:headers)
    button.btn.btn-info.btn-sm data-clipboard-target='#history_d_g_url' xjz-notify='URL Cpoied' Copy URL
    button.btn.btn-info.btn-sm.ml-2 data-clipboard-target='#history_d_g_curl' xjz-notify='URL Cpoied' Copy as cURL

    #history_d_g_curl.d-none = create_curl

    h6.mt-4.pb-1.border-bottom General
    - general =  { method: req.http_method.upcase, url: req.url }
    - if res
      - general[:code] = res.code
      - general['Request body size'] = number_to_human_size(req.body.bytesize)
      - general['Response body size'] = number_to_human_size(res.body.bytesize)
    .general = render('webui/_key_val.html', data: general, id_val: 'history_d_g_')

    h6.mt-4.pb-1.border-bottom Request
    .req = render('webui/_key_val.html', data: req.headers.to_a.sort)

    - if res && res.raw_headers
      h6.mt-4.pb-1.border-bottom Response
      - res_headers = res.raw_headers.map { |k, v| [k, (Array === v) ? v.join(', ') : v] }.sort
      .res = render('webui/_key_val.html', data: res_headers)

    - if req.body.present?
      h6.mt-4.pb-1.border-bottom Body
      .req_body
        pre.bg-light
          code.text-break = escape_html(req.body)

  - unless res&.body.to_s.empty?
    *tab_pane(:res)
      - case res.content_type
      - when /image\//
        img src=base64_url(res.decoded_body, res.content_type)
      - when /audio\//
        audio controls
          source src=base64_url(res.decoded_body, res.content_type) type=res.content_type
      - when /video\//
        video max-width=750 max-height=600 controls
          source src=base64_url(res.decoded_body, res.content_type) type=res.content_type
      - when /text|javascript|json|xml|html/
        pre.bg-light
          code.text-break = escape_html(res.decoded_body)
      - else
        a href=base64_url(res.decoded_body, res.content_type) Download

  - if api_desc.present?
    *tab_pane(:api)
      ruby:
        pairs = [
          ['Query', nil, api_desc['query'], req.query_hash],
          ['Body', nil, api_desc['body'], req.body_hash],
          ['Params', nil, api_desc['params'], req.params]
        ]
        succ_desc = api_desc['response']['success']
        if res && succ_desc
          pairs << ['Response Code', 'Code', succ_desc['http_code'] || 200, res.code]
          pairs << ['Response Headers', 'Headers', succ_desc['headers'], Hash[res.h2_headers], allow_extend: true]
          pairs << ['Response Body', 'Body', succ_desc['data'], res.body_hash]
        end

      - pairs.each do |title, prefix, expected, actual, opts|
        - expected ||= {}
        - actual ||= {}
        - next if expected == actual
        - diff = Xjz::ParamsDiff.new(opts || {}).diff(expected, actual, prefix || title)
        - next if diff.blank?

        h6.mt-4.pb-1.border-bottom = title
        table.table.table-striped.table-borderless
          thead
            tr
              th Index
              th Expected
              th Actual
          tbody
            - diff.each do |index, e, a|
              tr
                td = escape_html(index)
                td = Xjz::ApiProject::DataType === e ? ".t/#{e.name}" : escape_html(e.inspect)
                td = escape_html(a.inspect)

      h6.mt-4.pb-1.border-bottom = "API Definition - #{api_type.upcase}"

      pre.bg-light
        code.text-break = escape_html(JSON.pretty_generate(api_desc))

