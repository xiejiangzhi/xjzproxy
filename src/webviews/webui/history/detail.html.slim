- rt = request_tracker
- req = rt.request
- res = rt.response

ul.nav.nav-tabs.sticky-top.pt-1.bg-white[
  style="top: 56px;"
]
  li.nav-item
    a.nav-link.active href='#rt_headers' data-toggle='tab' Headers
  - if res
    li.nav-item
      a.nav-link href='#rt_preview' data-toggle='tab' Preview
    li.nav-item
      a.nav-link href='#rt_res' data-toggle='tab' Response
  li.nav-item
    a.nav-link href='#rt_timing' data-toggle='tab' Timing

.detail.tab-content.pt-3.pb-5 style='overflow-x: hidden;'
  #rt_headers.tab-pane.fade.active.show
    strong General
    - general =  { method: req.http_method.upcase, url: req.url }
    - if res
      - general[:code] = res.code
      - general['Request body size'] = number_to_human_size(req.body.bytesize)
      - general['Response body size'] = number_to_human_size(res.body.bytesize)
    .general.border-top = render('webui/_key_val.html', data: general)

    strong Request
    .req.border-top = render('webui/_key_val.html', data: req.headers)

    - if res && res.raw_headers
      strong Response
      .res.border-top = render('webui/_key_val.html', data: res.raw_headers)

    - if req.body.present?
      strong Body
      .req_body = Rack::Utils.escape_html(req.body)

  - if res
    #rt_preview.tab-pane.fade
      - case res.content_type
      - when /image/
        img src=base64_url(res.decoded_body, res.content_type)
      - when /text\/html/
        iframe.w-100[
          src=base64_url(res.decoded_body, res.content_type) style='height: calc(100vh - 56px - 60px);'
          sandbox="allow-scripts"
        ]
        
    #rt_res.tab-pane.fade
      - case res.content_type
      - when /image/
        | Cannot display binary data
      - else /text\/html/
        pre.bg-light
          code.text-break = escape_html(res.decoded_body)

  #rt_timing.tab-pane.fade
    - timing = { 'Start At' => l(rt.start_at, format: :tl), 'Cost' => number_to_human_interval(rt.cost) }
    - rt.action_list.each { |k, ts| timing["Action #{k}"] = ts.first }
    = render('webui/_key_val.html', data: timing)
